version: '3.8'

services:
  # Фронтенд
  frontend:
    build:
      context: ./frontend/my-react-app 
      dockerfile: Dockerfile.dev
    container_name: my-react-app-dev
    expose:
      - "3000"
    # ports:
    #   - "3000:3000"
    volumes:
      - ./frontend/my-react-app:/app
      - /app/node_modules
    environment:
      - WATCHPACK_POLLING=true
    command: npm run dev
    networks:
      - app-network

  # Бекенд
  backend:
    build:
      context: ./api  # шлях до каталогу бекенда
    container_name: node-api
    expose:
      - "8080"
    # ports:
    #   - "8080:8080"
    depends_on:
      - db  # залежить від бази даних
    environment:
      - DB_HOST=db
      - DB_USER=postgres
      - DB_PASSWORD=secret
      - DB_NAME=mydb
    networks:
      - app-network
    restart: always

  # База даних PostgreSQL
  db:
    image: postgres:13
    container_name: postgres-db
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: secret
      POSTGRES_DB: mydb
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./db-scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - app-network

  nginx:
    image: nginx:latest
    container_name: nginx-dev
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.dev.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - frontend
      - backend
    networks:
      - app-network

# Створення мостів для спільного доступу між контейнерами
networks:
  app-network:
    driver: bridge

# Тома для зберігання даних бази
volumes:
  postgres-data:
    external: true
